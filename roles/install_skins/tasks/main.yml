- name: copy configuration files
  ansible.builtin.copy:
    src={{ item }}
    dest={{ MW_WIKIFARM_CONFIG_DIRECTORY }}/{{ item }}
    force=no
    mode=644
    owner=www-data
    group=www-data
  with_items:
    - Skins.php

- name: get skins from composer
  community.general.composer:
    command: require
    working_dir: "{{ MW_CODE_RELEASE_DIRECTORY }}"
    arguments: "{{ item.composer }}:{{ item.version | default(\"dev-master\") }}"
  environment:
    COMPOSER: composer.local.json
    COMPOSER_NO_INTERACTION: "1"
    COMPOSER_ALLOW_SUPERUSER: "1"
  with_items: "{{ SKINS }}"
  when: item.composer is defined

- name: check out skins from git
  ansible.builtin.git:
    repo={{ item.url }}
    dest={{ MW_CODE_RELEASE_DIRECTORY }}/skins/{{ item.name }}
    version={{ item.version | default(MW_RELEASE) }}
    force=yes
    accept_hostkey=yes
  with_items: "{{ SKINS }}"
  when: item.url is defined

- name: initialize/update submodules
  ansible.builtin.shell: git submodule init; git submodule update
    chdir={{ MW_CODE_RELEASE_DIRECTORY }}/skins/{{ item.name }}
  with_items: "{{ SKINS }}"
  when: item.submodule is defined and item.submodule

- name: run composer update for skins that require it
  community.general.composer:
    command: update
    working_dir: "{{ MW_CODE_RELEASE_DIRECTORY }}/skins/{{ item.name }}"
  with_items: "{{ SKINS }}"
  when: item.composer_update is defined and item.composer_update
  environment:
    COMPOSER_NO_INTERACTION: "1"
    COMPOSER_ALLOW_SUPERUSER: "1"

- name: composer update
  community.general.composer:
    command: update
    working_dir: "{{ MW_CODE_RELEASE_DIRECTORY }}"
  environment:
    COMPOSER_NO_INTERACTION: "1"
    COMPOSER_ALLOW_SUPERUSER: "1"
